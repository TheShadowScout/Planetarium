@using PlanetariumData;
@model List<Planet>
@{
    ViewBag.Title = "Symulacja układu planetarnego";
}
<head>

</head>
<body>
    <!-- tabelka i układ planetarny -->
    @if (ViewData["Error"] != null)
    {
        <div class="alert alert-danger">@ViewData["Error"]</div>
    }
    <div class="d-flex">
        <div>
            <canvas id="myCanvas" width="1295" height="600" style="background: #000" class="rounded-2 border border-3"></canvas>

            <div class="btn-group d-flex justify-content-center">
                <button type="button" id="addPlanetBtn" class="btn bg-primary bg-gradient border border-1 text-light" data-bs-toggle="modal" data-bs-target="#addPlanet">Dodaj nową planetę</button>
                <button type="button" id="addStarSystemBtn" class="btn bg-primary bg-gradient border border-1 text-light" data-bs-toggle="modal" data-bs-target="#addStarSystem">Dodaj nowy układ gwiezdny</button>

            </div>
        </div>
    </div>
    <!-- modale -->
    <!-- dodawanie planety -->
    <div class="modal fade" id="addPlanet" tabindex="-1" aria-labelledby="modal" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content text-dark">
                <div class="modal-header bg-primary bg-gradient text-light">
                    <h5 class="modal-title" id="planetModalLabel">Dodaj planetę</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Zamknij"></button>
                </div>
                <form method="post" action="/home/AddPlanet">
                    <div class="modal-body">
                        <label for="name" class="form-label">Nazwa planety:</label>
                        <input type="text" class="form-control" id="name" name="name" placeholder="Tu wprowadź nazwę planety..." />

                        <label for="distanceFromStar" class="form-label">Odległość od gwiazdy: <input class="border-0" id="distanceFromStar" name="distanceFromStar" value="0" /></label>
                        <input type="range" class="form-range" id="distanceFromStar-range" min="0" max="21.5" step="0.01" value="0" oninput="distanceFromStar.value = this.value" />

                        <label for="radius" class="form-label">Promień: <input class="border-0 " id="radius" name="radius" value="2" /></label>
                        <input type="range" class="form-range" id="radius-range" min="2" max="60" step="0.1" value="2" oninput="radius.value = this.value">

                        <label for="cycle" class="form-label">Długość cyklu: <input class="border-0 " id="cycle" name="cycle" value="11" /></label>
                        <input type="range" class="form-range" id="cycle-range" min="11" max="1000" step="0.1" value="11" oninput="cycle.value = this.value">

                        <label for="surfaceColor" class="form-label">Kolor powierzchni:</label>
                        <input type="color" class="form-control form-control-color" id="surfaceColor" value="#000000" name="surfaceColor" />

                        <label for="coreColor" class="form-label">Kolor środka:</label>
                        <input type="color" class="form-control form-control-color" id="coreColor" value="#000000" name="coreColor" />

                        <div class="mb-3 form-check">
                            <br />
                            <input type="checkbox" class="form-check-input" id="isReversed" name="isReversed" />
                            <label for="isReversed" class="form-check-label">Obrót przeciwny do ruchu wskazówek zegara?</label>
                        </div>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zamknij</button>
                        <button type="submit" class="btn btn-primary" value="addPlanet">Dodaj planetę</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <!-- dodawanie układu gwiezdnego -->
    <div class="modal fade" id="addStarSystem" tabindex="-1" aria-labelledby="modal" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content text-dark">
                <div class="modal-header bg-primary bg-gradient text-light">
                    <h5 class="modal-title" id="starSystemModalLabel">Dodaj układ gwiezdny</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Zamknij"></button>
                </div>
                <form method="post" action="/home/AddStarSystem">
                    <div class="modal-body">
                        <label for="name" class="form-label">Nazwa układu gwiezdnego:</label>
                        <input type="text" class="form-control" id="name" name="name" placeholder="Tu wprowadź nazwę nowego układu..." />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zamknij</button>
                        <button type="submit" class="btn btn-primary" value="addPlanet">Dodaj układ gwiezdny</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.min.js" integrity="sha384-j0CNLUeiqtyaRmlzUHCPZ+Gy5fQu0dQ6eZ/xAww941Ai1SxSY+0EQqNXNE6DZiVc" crossorigin="anonymous"></script>

    <!-- Javascript -->
    <script>
        document.getElementById("addPlanetBtn").disabled = false;
        @if (Convert.ToString(ViewData["Error"]) == "Brak układów gwiezdnych! Utwórz nowy!" || Convert.ToString(ViewData["Error"]) == "Wybierz układ gwiezdny!")
        {
            @:document.getElementById("addPlanetBtn").disabled = true;
        }
        @if (Model.Count == 0 || Model.First().Type == "Planeta")
        {
            @:$("#addPlanet").find('#distanceFromStar').val(0);
            @:$("#addPlanet").find('#distanceFromStar').attr("readonly", true);
            @:$("#addPlanet").find('#distanceFromStar-range').attr("disabled", true);

            @:$("#addPlanet").find('#cycle').val(0);
            @:$("#addPlanet").find('#cycle').attr("readonly", true);
            @:$("#addPlanet").find('#cycle-range').attr("disabled", true);

            @:$("#addPlanet").find('#isReversed').val("false");
            @:$("#addPlanet").find('#isReversed').attr("readonly", true);
        }
        @if (Model.Count > 0 && Model.First().Type == "Gwiazda")
        {
            @:$("#addPlanet").find('#distanceFromStar-range').attr("min", (parseFloat('@Model.First().Radius') * 0.033).toFixed(1));
            @:$("#addPlanet").find('#distanceFromStar').val((parseFloat('@Model.First().Radius') * 0.033).toFixed(1));
        }
        var cxt = document.getElementById("myCanvas").getContext("2d")

        function drawTrack() {
            @foreach(Planet planet in Model)
            {
                @:cxt.beginPath()
                @:cxt.arc(647.5, 300, parseFloat(("@planet.DistanceFromStar").replace(',','.')) * 30, 0, 2 * Math.PI, false)
                @:cxt.strokeStyle = "#fff";
                @:cxt.stroke()
                @:cxt.closePath()
            }
        }
        drawTrack()

        function PlanetDrawing() {
            this.color = null;
            this.time = 0;
            this.draw = function () {
                @foreach(Planet planet in Model)
                {

                    @:cxt.beginPath();
                    @:cxt.save();
                    @:cxt.translate(647.5, 300);
                    if (planet.IsReversed == true)
                    {
                        @:cxt.rotate(-this.time * 360 / parseFloat('@planet.Cycle') * Math.PI / 180);
                    }
                    else
                    {
                        @:cxt.rotate(this.time * 360 / parseFloat('@planet.Cycle') * Math.PI / 180);
                    }
                    @:cxt.arc(0, -parseFloat('@planet.DistanceFromStar'.replace(',', '.')) * 30, parseFloat('@planet.Radius'), 0, 2 * Math.PI, false);
                    @:this.color = cxt.createRadialGradient(0, -parseFloat('@planet.DistanceFromStar'.replace(',', '.')) * 30, 0, 0, -parseFloat('@planet.DistanceFromStar'.replace(',', '.')) * 30, parseFloat('@planet.Radius'));
                    @:this.color.addColorStop(0, '@planet.CoreColor')
                    @:this.color.addColorStop(1, '@planet.SurfaceColor')
                    @:cxt.fillStyle = this.color
                    @:cxt.fill()
                    @:cxt.restore()
                    @:cxt.closePath()
                }
                this.time += 1
            }
        }

        var planets = new PlanetDrawing()
        function move() {
            cxt.clearRect(0, 0, 2000, 2000)
            drawTrack()
            planets.draw()
        }

        function animate() {
            requestAnimationFrame(function () {
                move()
                animate()
            })
        }
        animate()
    </script>
</body>